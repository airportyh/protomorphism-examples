{
  "name": "protomorphism",
  "version": "1.0.0",
  "description": "Polymorphism via clojure-style protocols.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "polymorphism",
    "protocol"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/airportyh/protomorphism.git"
  },
  "author": {
    "name": "Toby Ho"
  },
  "license": "MIT",
  "readme": "# protomorphism\n\nPolymorphism via Clojure-style protocols.\n\n## Install\n\n`npm install protomorphism`\n\n## Example\n\n```js\nconst protocol = require('protomorphism')\n\n// create a new protocol `Pattern`, which requires a\n// `matches` function to be implemented\nconst Pattern = protocol({\n  matches: function(pattern, string){\n    // returns true if string matches pattern\n  }\n})\n\n// Make all strings implement pattern by exact matching\nPattern.implementation(String, {\n  matches: function(pattern, string){\n    return pattern === string\n  }\n})\n\n// Make all arrays implement pattern by reporting a match\n// when the array contains the target string\nPattern.implementation(Array, {\n  matches: function(arr, string){\n    return arr.indexOf(string) !== -1\n  }\n})\n\n// Make all regular expressions implement pattern\nPattern.implementation(RegExp, {\n  matches: function(regexp, string){\n    return !!regexp.test(string)\n  }\n})\n\nconst matches = Pattern.matches\nconst patterns = [\n  'README.md',\n  'README',\n  ['README.md', 'readme.md'],\n  /README\\.(md|rdoc|txt)/i\n]\n\nlet matched = patterns.some(function(pattern){\n  return matches(pattern, input)\n})\n```",
  "readmeFilename": "README.md",
  "gitHead": "ec609935de8f7ad3d71d280a6345ed46c8ba53a6",
  "bugs": {
    "url": "https://github.com/airportyh/protomorphism/issues"
  },
  "homepage": "https://github.com/airportyh/protomorphism#readme",
  "_id": "protomorphism@1.0.0",
  "_shasum": "2c6b1a7e8bdd98caad27db3e13ec539c67d1dab5",
  "_from": "protomorphism@*"
}
